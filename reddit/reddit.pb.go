// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: reddit/reddit.proto

package reddit

import (
	date "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubRedditState int32

const (
	SubRedditState_SUBREDDITSTATE_UNSPECIFIED SubRedditState = 0
	SubRedditState_PUBLIC                     SubRedditState = 1
	SubRedditState_PRIVATE                    SubRedditState = 2
	SubRedditState_HIDDEN                     SubRedditState = 3
)

// Enum value maps for SubRedditState.
var (
	SubRedditState_name = map[int32]string{
		0: "SUBREDDITSTATE_UNSPECIFIED",
		1: "PUBLIC",
		2: "PRIVATE",
		3: "HIDDEN",
	}
	SubRedditState_value = map[string]int32{
		"SUBREDDITSTATE_UNSPECIFIED": 0,
		"PUBLIC":                     1,
		"PRIVATE":                    2,
		"HIDDEN":                     3,
	}
)

func (x SubRedditState) Enum() *SubRedditState {
	p := new(SubRedditState)
	*p = x
	return p
}

func (x SubRedditState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubRedditState) Descriptor() protoreflect.EnumDescriptor {
	return file_reddit_reddit_proto_enumTypes[0].Descriptor()
}

func (SubRedditState) Type() protoreflect.EnumType {
	return &file_reddit_reddit_proto_enumTypes[0]
}

func (x SubRedditState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubRedditState.Descriptor instead.
func (SubRedditState) EnumDescriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{0}
}

type PostState int32

const (
	PostState_POSTSTATE_UNSPECIFIED PostState = 0
	PostState_NORMAL_POST           PostState = 1
	PostState_LOCKED_POST           PostState = 2
	PostState_HIDDEN_POST           PostState = 3
)

// Enum value maps for PostState.
var (
	PostState_name = map[int32]string{
		0: "POSTSTATE_UNSPECIFIED",
		1: "NORMAL_POST",
		2: "LOCKED_POST",
		3: "HIDDEN_POST",
	}
	PostState_value = map[string]int32{
		"POSTSTATE_UNSPECIFIED": 0,
		"NORMAL_POST":           1,
		"LOCKED_POST":           2,
		"HIDDEN_POST":           3,
	}
)

func (x PostState) Enum() *PostState {
	p := new(PostState)
	*p = x
	return p
}

func (x PostState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostState) Descriptor() protoreflect.EnumDescriptor {
	return file_reddit_reddit_proto_enumTypes[1].Descriptor()
}

func (PostState) Type() protoreflect.EnumType {
	return &file_reddit_reddit_proto_enumTypes[1]
}

func (x PostState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostState.Descriptor instead.
func (PostState) EnumDescriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{1}
}

type CommentState int32

const (
	CommentState_COMMENTSTATE_UNSPECIFIED CommentState = 0
	CommentState_NORMAL_COMMENT           CommentState = 1
	CommentState_LOCKED_COMMENT           CommentState = 2
)

// Enum value maps for CommentState.
var (
	CommentState_name = map[int32]string{
		0: "COMMENTSTATE_UNSPECIFIED",
		1: "NORMAL_COMMENT",
		2: "LOCKED_COMMENT",
	}
	CommentState_value = map[string]int32{
		"COMMENTSTATE_UNSPECIFIED": 0,
		"NORMAL_COMMENT":           1,
		"LOCKED_COMMENT":           2,
	}
)

func (x CommentState) Enum() *CommentState {
	p := new(CommentState)
	*p = x
	return p
}

func (x CommentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommentState) Descriptor() protoreflect.EnumDescriptor {
	return file_reddit_reddit_proto_enumTypes[2].Descriptor()
}

func (CommentState) Type() protoreflect.EnumType {
	return &file_reddit_reddit_proto_enumTypes[2]
}

func (x CommentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommentState.Descriptor instead.
func (CommentState) EnumDescriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{2}
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reddit_reddit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_reddit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SubReddit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	State SubRedditState `protobuf:"varint,3,opt,name=state,proto3,enum=reddit.SubRedditState" json:"state,omitempty"` // State should never be unspecified
	Tags  []string       `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *SubReddit) Reset() {
	*x = SubReddit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reddit_reddit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubReddit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubReddit) ProtoMessage() {}

func (x *SubReddit) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_reddit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubReddit.ProtoReflect.Descriptor instead.
func (*SubReddit) Descriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{1}
}

func (x *SubReddit) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubReddit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubReddit) GetState() SubRedditState {
	if x != nil {
		return x.State
	}
	return SubRedditState_SUBREDDITSTATE_UNSPECIFIED
}

func (x *SubReddit) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Post struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title           string     `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content         string     `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	SubReddit       *SubReddit `protobuf:"bytes,4,opt,name=subReddit,proto3" json:"subReddit,omitempty"`
	VideoURL        *string    `protobuf:"bytes,5,opt,name=videoURL,proto3,oneof" json:"videoURL,omitempty"`
	ImageURL        *string    `protobuf:"bytes,6,opt,name=imageURL,proto3,oneof" json:"imageURL,omitempty"`
	Author          *User      `protobuf:"bytes,7,opt,name=author,proto3,oneof" json:"author,omitempty"`
	Score           int32      `protobuf:"varint,8,opt,name=score,proto3" json:"score,omitempty"`
	State           PostState  `protobuf:"varint,9,opt,name=state,proto3,enum=reddit.PostState" json:"state,omitempty"` // State should never be unspecified
	PublicationDate *date.Date `protobuf:"bytes,10,opt,name=publicationDate,proto3" json:"publicationDate,omitempty"`
	Comments        []string   `protobuf:"bytes,11,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (x *Post) Reset() {
	*x = Post{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reddit_reddit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Post) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Post) ProtoMessage() {}

func (x *Post) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_reddit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Post.ProtoReflect.Descriptor instead.
func (*Post) Descriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{2}
}

func (x *Post) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Post) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Post) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Post) GetSubReddit() *SubReddit {
	if x != nil {
		return x.SubReddit
	}
	return nil
}

func (x *Post) GetVideoURL() string {
	if x != nil && x.VideoURL != nil {
		return *x.VideoURL
	}
	return ""
}

func (x *Post) GetImageURL() string {
	if x != nil && x.ImageURL != nil {
		return *x.ImageURL
	}
	return ""
}

func (x *Post) GetAuthor() *User {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Post) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Post) GetState() PostState {
	if x != nil {
		return x.State
	}
	return PostState_POSTSTATE_UNSPECIFIED
}

func (x *Post) GetPublicationDate() *date.Date {
	if x != nil {
		return x.PublicationDate
	}
	return nil
}

func (x *Post) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Content         string       `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Author          *User        `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	Score           int32        `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	State           CommentState `protobuf:"varint,7,opt,name=state,proto3,enum=reddit.CommentState" json:"state,omitempty"` // State should never be unspecified
	PublicationDate *date.Date   `protobuf:"bytes,8,opt,name=publicationDate,proto3" json:"publicationDate,omitempty"`
	Comments        []string     `protobuf:"bytes,9,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reddit_reddit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_reddit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{3}
}

func (x *Comment) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetAuthor() *User {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Comment) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Comment) GetState() CommentState {
	if x != nil {
		return x.State
	}
	return CommentState_COMMENTSTATE_UNSPECIFIED
}

func (x *Comment) GetPublicationDate() *date.Date {
	if x != nil {
		return x.PublicationDate
	}
	return nil
}

func (x *Comment) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

// The request message for creating a post
type CreatePostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Post *Post `protobuf:"bytes,1,opt,name=post,proto3" json:"post,omitempty"`
}

func (x *CreatePostRequest) Reset() {
	*x = CreatePostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reddit_reddit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePostRequest) ProtoMessage() {}

func (x *CreatePostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_reddit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePostRequest.ProtoReflect.Descriptor instead.
func (*CreatePostRequest) Descriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePostRequest) GetPost() *Post {
	if x != nil {
		return x.Post
	}
	return nil
}

// The response message for creating a post
type CreatePostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Post *Post `protobuf:"bytes,1,opt,name=post,proto3" json:"post,omitempty"`
}

func (x *CreatePostResponse) Reset() {
	*x = CreatePostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reddit_reddit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePostResponse) ProtoMessage() {}

func (x *CreatePostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_reddit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePostResponse.ProtoReflect.Descriptor instead.
func (*CreatePostResponse) Descriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{5}
}

func (x *CreatePostResponse) GetPost() *Post {
	if x != nil {
		return x.Post
	}
	return nil
}

// The request message for upvoting or downvoting a post
type VotePostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostID  int32 `protobuf:"varint,1,opt,name=postID,proto3" json:"postID,omitempty"`
	VoterID int32 `protobuf:"varint,2,opt,name=voterID,proto3" json:"voterID,omitempty"`
	Upvote  bool  `protobuf:"varint,3,opt,name=upvote,proto3" json:"upvote,omitempty"`
}

func (x *VotePostRequest) Reset() {
	*x = VotePostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reddit_reddit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VotePostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VotePostRequest) ProtoMessage() {}

func (x *VotePostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_reddit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VotePostRequest.ProtoReflect.Descriptor instead.
func (*VotePostRequest) Descriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{6}
}

func (x *VotePostRequest) GetPostID() int32 {
	if x != nil {
		return x.PostID
	}
	return 0
}

func (x *VotePostRequest) GetVoterID() int32 {
	if x != nil {
		return x.VoterID
	}
	return 0
}

func (x *VotePostRequest) GetUpvote() bool {
	if x != nil {
		return x.Upvote
	}
	return false
}

// The response message for upvoting or downvoting a post
type VotePostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score int32 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *VotePostResponse) Reset() {
	*x = VotePostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reddit_reddit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VotePostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VotePostResponse) ProtoMessage() {}

func (x *VotePostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_reddit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VotePostResponse.ProtoReflect.Descriptor instead.
func (*VotePostResponse) Descriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{7}
}

func (x *VotePostResponse) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// The request message for retrieving a post
type GetPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostID int32 `protobuf:"varint,1,opt,name=postID,proto3" json:"postID,omitempty"`
}

func (x *GetPostRequest) Reset() {
	*x = GetPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reddit_reddit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostRequest) ProtoMessage() {}

func (x *GetPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_reddit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostRequest.ProtoReflect.Descriptor instead.
func (*GetPostRequest) Descriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{8}
}

func (x *GetPostRequest) GetPostID() int32 {
	if x != nil {
		return x.PostID
	}
	return 0
}

// The response message for retrieving a post
type GetPostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Post *Post `protobuf:"bytes,1,opt,name=post,proto3" json:"post,omitempty"`
}

func (x *GetPostResponse) Reset() {
	*x = GetPostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reddit_reddit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostResponse) ProtoMessage() {}

func (x *GetPostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_reddit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostResponse.ProtoReflect.Descriptor instead.
func (*GetPostResponse) Descriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{9}
}

func (x *GetPostResponse) GetPost() *Post {
	if x != nil {
		return x.Post
	}
	return nil
}

// The request message for creating a comment
type CreateCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment *Comment `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *CreateCommentRequest) Reset() {
	*x = CreateCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reddit_reddit_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommentRequest) ProtoMessage() {}

func (x *CreateCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_reddit_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommentRequest.ProtoReflect.Descriptor instead.
func (*CreateCommentRequest) Descriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{10}
}

func (x *CreateCommentRequest) GetComment() *Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

// The response message for creating a comment
type CreateCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comment *Comment `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *CreateCommentResponse) Reset() {
	*x = CreateCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reddit_reddit_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommentResponse) ProtoMessage() {}

func (x *CreateCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_reddit_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommentResponse.ProtoReflect.Descriptor instead.
func (*CreateCommentResponse) Descriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{11}
}

func (x *CreateCommentResponse) GetComment() *Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

// The request message for upvoting or downvoting a comment
type VoteCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentID int32 `protobuf:"varint,1,opt,name=commentID,proto3" json:"commentID,omitempty"`
	VoterID   int32 `protobuf:"varint,2,opt,name=voterID,proto3" json:"voterID,omitempty"`
	Upvote    bool  `protobuf:"varint,3,opt,name=upvote,proto3" json:"upvote,omitempty"`
}

func (x *VoteCommentRequest) Reset() {
	*x = VoteCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reddit_reddit_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteCommentRequest) ProtoMessage() {}

func (x *VoteCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_reddit_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteCommentRequest.ProtoReflect.Descriptor instead.
func (*VoteCommentRequest) Descriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{12}
}

func (x *VoteCommentRequest) GetCommentID() int32 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

func (x *VoteCommentRequest) GetVoterID() int32 {
	if x != nil {
		return x.VoterID
	}
	return 0
}

func (x *VoteCommentRequest) GetUpvote() bool {
	if x != nil {
		return x.Upvote
	}
	return false
}

// The response message for upvoting or downvoting a comment
type VoteCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score int32 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *VoteCommentResponse) Reset() {
	*x = VoteCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reddit_reddit_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteCommentResponse) ProtoMessage() {}

func (x *VoteCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_reddit_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteCommentResponse.ProtoReflect.Descriptor instead.
func (*VoteCommentResponse) Descriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{13}
}

func (x *VoteCommentResponse) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// The request message for retrieving a list of N most upvoted comments under a post
type GetTopCommentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostID   int32 `protobuf:"varint,1,opt,name=postID,proto3" json:"postID,omitempty"`
	Quantity int32 `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *GetTopCommentsRequest) Reset() {
	*x = GetTopCommentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reddit_reddit_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopCommentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopCommentsRequest) ProtoMessage() {}

func (x *GetTopCommentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_reddit_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopCommentsRequest.ProtoReflect.Descriptor instead.
func (*GetTopCommentsRequest) Descriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{14}
}

func (x *GetTopCommentsRequest) GetPostID() int32 {
	if x != nil {
		return x.PostID
	}
	return 0
}

func (x *GetTopCommentsRequest) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// The response message for retrieving a list of N most upvoted comments under a post
type GetTopCommentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments []*Comment `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (x *GetTopCommentsResponse) Reset() {
	*x = GetTopCommentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reddit_reddit_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopCommentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopCommentsResponse) ProtoMessage() {}

func (x *GetTopCommentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_reddit_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopCommentsResponse.ProtoReflect.Descriptor instead.
func (*GetTopCommentsResponse) Descriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{15}
}

func (x *GetTopCommentsResponse) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

// The request message for expanding a comment branch
type ExpandCommentBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentID int32 `protobuf:"varint,1,opt,name=commentID,proto3" json:"commentID,omitempty"`
}

func (x *ExpandCommentBranchRequest) Reset() {
	*x = ExpandCommentBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reddit_reddit_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandCommentBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandCommentBranchRequest) ProtoMessage() {}

func (x *ExpandCommentBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_reddit_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandCommentBranchRequest.ProtoReflect.Descriptor instead.
func (*ExpandCommentBranchRequest) Descriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{16}
}

func (x *ExpandCommentBranchRequest) GetCommentID() int32 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

// The response message for expanding a comment branch
type ExpandCommentBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments []*Comment `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (x *ExpandCommentBranchResponse) Reset() {
	*x = ExpandCommentBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reddit_reddit_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandCommentBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandCommentBranchResponse) ProtoMessage() {}

func (x *ExpandCommentBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_reddit_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandCommentBranchResponse.ProtoReflect.Descriptor instead.
func (*ExpandCommentBranchResponse) Descriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{17}
}

func (x *ExpandCommentBranchResponse) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

// The request message for monitoring updates
type MonitorUpdatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int32 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *MonitorUpdatesRequest) Reset() {
	*x = MonitorUpdatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reddit_reddit_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorUpdatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorUpdatesRequest) ProtoMessage() {}

func (x *MonitorUpdatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_reddit_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorUpdatesRequest.ProtoReflect.Descriptor instead.
func (*MonitorUpdatesRequest) Descriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{18}
}

func (x *MonitorUpdatesRequest) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

// The response message for monitoring updates
type MonitorUpdatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Posts    []*Post    `protobuf:"bytes,1,rep,name=posts,proto3" json:"posts,omitempty"`
	Comments []*Comment `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (x *MonitorUpdatesResponse) Reset() {
	*x = MonitorUpdatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reddit_reddit_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorUpdatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorUpdatesResponse) ProtoMessage() {}

func (x *MonitorUpdatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_reddit_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorUpdatesResponse.ProtoReflect.Descriptor instead.
func (*MonitorUpdatesResponse) Descriptor() ([]byte, []int) {
	return file_reddit_reddit_proto_rawDescGZIP(), []int{19}
}

func (x *MonitorUpdatesResponse) GetPosts() []*Post {
	if x != nil {
		return x.Posts
	}
	return nil
}

func (x *MonitorUpdatesResponse) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

var File_reddit_reddit_proto protoreflect.FileDescriptor

var file_reddit_reddit_proto_rawDesc = []byte{
	0x0a, 0x13, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2f, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x1a, 0x16, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x16, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x71, 0x0a,
	0x09, 0x53, 0x75, 0x62, 0x52, 0x65, 0x64, 0x64, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x52, 0x65, 0x64, 0x64, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x22, 0xa1, 0x03, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x73, 0x75, 0x62,
	0x52, 0x65, 0x64, 0x64, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72,
	0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x52, 0x65, 0x64, 0x64, 0x69, 0x74, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x52, 0x65, 0x64, 0x64, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x52, 0x4c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72,
	0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x48, 0x02, 0x52, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x27, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72,
	0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x52, 0x4c, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x22, 0xf4, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x65, 0x64,
	0x64, 0x69, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x35, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x70, 0x6f,
	0x73, 0x74, 0x22, 0x36, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x0f, 0x56, 0x6f,
	0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70,
	0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x22, 0x28, 0x0a, 0x10, 0x56, 0x6f, 0x74, 0x65, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0x28, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x22, 0x33, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72,
	0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74,
	0x22, 0x41, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x64, 0x64,
	0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x64, 0x0a, 0x12, 0x56, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x6f, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6f,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x22, 0x2b, 0x0a,
	0x13, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x4b, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x45, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3a,
	0x0a, 0x1a, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x4a, 0x0a, 0x1b, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65,
	0x64, 0x64, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x2f, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x69, 0x0a, 0x16, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x05,
	0x70, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2a, 0x55, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x52, 0x65, 0x64, 0x64, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x55, 0x42, 0x52, 0x45, 0x44, 0x44, 0x49,
	0x54, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x03, 0x2a, 0x59, 0x0a, 0x09, 0x50, 0x6f, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x53, 0x54, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x53, 0x54,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x53,
	0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x50, 0x4f,
	0x53, 0x54, 0x10, 0x03, 0x2a, 0x54, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x32, 0xf2, 0x04, 0x0a, 0x06, 0x52,
	0x65, 0x64, 0x64, 0x69, 0x74, 0x12, 0x45, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x08,
	0x56, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69,
	0x74, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x72,
	0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x65, 0x64,
	0x64, 0x69, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b, 0x56,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x72, 0x65, 0x64,
	0x64, 0x69, 0x74, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x22, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x72,
	0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x72, 0x65,
	0x64, 0x64, 0x69, 0x74, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42,
	0x20, 0x5a, 0x1e, 0x74, 0x6f, 0x6d, 0x79, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2d, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2f, 0x72, 0x65, 0x64, 0x64, 0x69,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_reddit_reddit_proto_rawDescOnce sync.Once
	file_reddit_reddit_proto_rawDescData = file_reddit_reddit_proto_rawDesc
)

func file_reddit_reddit_proto_rawDescGZIP() []byte {
	file_reddit_reddit_proto_rawDescOnce.Do(func() {
		file_reddit_reddit_proto_rawDescData = protoimpl.X.CompressGZIP(file_reddit_reddit_proto_rawDescData)
	})
	return file_reddit_reddit_proto_rawDescData
}

var file_reddit_reddit_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_reddit_reddit_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_reddit_reddit_proto_goTypes = []interface{}{
	(SubRedditState)(0),                 // 0: reddit.SubRedditState
	(PostState)(0),                      // 1: reddit.PostState
	(CommentState)(0),                   // 2: reddit.CommentState
	(*User)(nil),                        // 3: reddit.User
	(*SubReddit)(nil),                   // 4: reddit.SubReddit
	(*Post)(nil),                        // 5: reddit.Post
	(*Comment)(nil),                     // 6: reddit.Comment
	(*CreatePostRequest)(nil),           // 7: reddit.CreatePostRequest
	(*CreatePostResponse)(nil),          // 8: reddit.CreatePostResponse
	(*VotePostRequest)(nil),             // 9: reddit.VotePostRequest
	(*VotePostResponse)(nil),            // 10: reddit.VotePostResponse
	(*GetPostRequest)(nil),              // 11: reddit.GetPostRequest
	(*GetPostResponse)(nil),             // 12: reddit.GetPostResponse
	(*CreateCommentRequest)(nil),        // 13: reddit.CreateCommentRequest
	(*CreateCommentResponse)(nil),       // 14: reddit.CreateCommentResponse
	(*VoteCommentRequest)(nil),          // 15: reddit.VoteCommentRequest
	(*VoteCommentResponse)(nil),         // 16: reddit.VoteCommentResponse
	(*GetTopCommentsRequest)(nil),       // 17: reddit.GetTopCommentsRequest
	(*GetTopCommentsResponse)(nil),      // 18: reddit.GetTopCommentsResponse
	(*ExpandCommentBranchRequest)(nil),  // 19: reddit.ExpandCommentBranchRequest
	(*ExpandCommentBranchResponse)(nil), // 20: reddit.ExpandCommentBranchResponse
	(*MonitorUpdatesRequest)(nil),       // 21: reddit.MonitorUpdatesRequest
	(*MonitorUpdatesResponse)(nil),      // 22: reddit.MonitorUpdatesResponse
	(*date.Date)(nil),                   // 23: google.type.Date
}
var file_reddit_reddit_proto_depIdxs = []int32{
	0,  // 0: reddit.SubReddit.state:type_name -> reddit.SubRedditState
	4,  // 1: reddit.Post.subReddit:type_name -> reddit.SubReddit
	3,  // 2: reddit.Post.author:type_name -> reddit.User
	1,  // 3: reddit.Post.state:type_name -> reddit.PostState
	23, // 4: reddit.Post.publicationDate:type_name -> google.type.Date
	3,  // 5: reddit.Comment.author:type_name -> reddit.User
	2,  // 6: reddit.Comment.state:type_name -> reddit.CommentState
	23, // 7: reddit.Comment.publicationDate:type_name -> google.type.Date
	5,  // 8: reddit.CreatePostRequest.post:type_name -> reddit.Post
	5,  // 9: reddit.CreatePostResponse.post:type_name -> reddit.Post
	5,  // 10: reddit.GetPostResponse.post:type_name -> reddit.Post
	6,  // 11: reddit.CreateCommentRequest.comment:type_name -> reddit.Comment
	6,  // 12: reddit.CreateCommentResponse.comment:type_name -> reddit.Comment
	6,  // 13: reddit.GetTopCommentsResponse.comments:type_name -> reddit.Comment
	6,  // 14: reddit.ExpandCommentBranchResponse.comments:type_name -> reddit.Comment
	5,  // 15: reddit.MonitorUpdatesResponse.posts:type_name -> reddit.Post
	6,  // 16: reddit.MonitorUpdatesResponse.comments:type_name -> reddit.Comment
	7,  // 17: reddit.Reddit.CreatePost:input_type -> reddit.CreatePostRequest
	9,  // 18: reddit.Reddit.VotePost:input_type -> reddit.VotePostRequest
	11, // 19: reddit.Reddit.GetPost:input_type -> reddit.GetPostRequest
	13, // 20: reddit.Reddit.CreateComment:input_type -> reddit.CreateCommentRequest
	15, // 21: reddit.Reddit.VoteComment:input_type -> reddit.VoteCommentRequest
	17, // 22: reddit.Reddit.GetTopComments:input_type -> reddit.GetTopCommentsRequest
	19, // 23: reddit.Reddit.ExpandCommentBranch:input_type -> reddit.ExpandCommentBranchRequest
	21, // 24: reddit.Reddit.MonitorUpdates:input_type -> reddit.MonitorUpdatesRequest
	8,  // 25: reddit.Reddit.CreatePost:output_type -> reddit.CreatePostResponse
	10, // 26: reddit.Reddit.VotePost:output_type -> reddit.VotePostResponse
	12, // 27: reddit.Reddit.GetPost:output_type -> reddit.GetPostResponse
	14, // 28: reddit.Reddit.CreateComment:output_type -> reddit.CreateCommentResponse
	16, // 29: reddit.Reddit.VoteComment:output_type -> reddit.VoteCommentResponse
	18, // 30: reddit.Reddit.GetTopComments:output_type -> reddit.GetTopCommentsResponse
	20, // 31: reddit.Reddit.ExpandCommentBranch:output_type -> reddit.ExpandCommentBranchResponse
	22, // 32: reddit.Reddit.MonitorUpdates:output_type -> reddit.MonitorUpdatesResponse
	25, // [25:33] is the sub-list for method output_type
	17, // [17:25] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_reddit_reddit_proto_init() }
func file_reddit_reddit_proto_init() {
	if File_reddit_reddit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_reddit_reddit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reddit_reddit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubReddit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reddit_reddit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Post); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reddit_reddit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reddit_reddit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reddit_reddit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reddit_reddit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VotePostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reddit_reddit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VotePostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reddit_reddit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reddit_reddit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reddit_reddit_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reddit_reddit_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reddit_reddit_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reddit_reddit_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reddit_reddit_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopCommentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reddit_reddit_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopCommentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reddit_reddit_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandCommentBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reddit_reddit_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandCommentBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reddit_reddit_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorUpdatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reddit_reddit_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorUpdatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_reddit_reddit_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_reddit_reddit_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_reddit_reddit_proto_goTypes,
		DependencyIndexes: file_reddit_reddit_proto_depIdxs,
		EnumInfos:         file_reddit_reddit_proto_enumTypes,
		MessageInfos:      file_reddit_reddit_proto_msgTypes,
	}.Build()
	File_reddit_reddit_proto = out.File
	file_reddit_reddit_proto_rawDesc = nil
	file_reddit_reddit_proto_goTypes = nil
	file_reddit_reddit_proto_depIdxs = nil
}
