// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: reddit/reddit.proto

package reddit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RedditClient is the client API for Reddit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedditClient interface {
	// Create a post
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
}

type redditClient struct {
	cc grpc.ClientConnInterface
}

func NewRedditClient(cc grpc.ClientConnInterface) RedditClient {
	return &redditClient{cc}
}

func (c *redditClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, "/reddit.Reddit/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedditServer is the server API for Reddit service.
// All implementations must embed UnimplementedRedditServer
// for forward compatibility
type RedditServer interface {
	// Create a post
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	mustEmbedUnimplementedRedditServer()
}

// UnimplementedRedditServer must be embedded to have forward compatible implementations.
type UnimplementedRedditServer struct {
}

func (UnimplementedRedditServer) CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedRedditServer) mustEmbedUnimplementedRedditServer() {}

// UnsafeRedditServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedditServer will
// result in compilation errors.
type UnsafeRedditServer interface {
	mustEmbedUnimplementedRedditServer()
}

func RegisterRedditServer(s grpc.ServiceRegistrar, srv RedditServer) {
	s.RegisterService(&Reddit_ServiceDesc, srv)
}

func _Reddit_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedditServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reddit.Reddit/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedditServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Reddit_ServiceDesc is the grpc.ServiceDesc for Reddit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reddit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reddit.Reddit",
	HandlerType: (*RedditServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _Reddit_CreatePost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reddit/reddit.proto",
}
