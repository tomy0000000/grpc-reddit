syntax = "proto3";

package reddit;

import "google/type/date.proto";

option go_package = "github.com/tomy0000000/grpc-reddit/reddit";

// The reddit service definition.
service Reddit {
  // Create a post
  rpc CreatePost (CreatePostRequest) returns (CreatePostResponse) {}

  // Upvote or downvote a Post
  rpc VotePost (VotePostRequest) returns (VotePostResponse) {}

  // Retrieve Post content
  rpc GetPost (GetPostRequest) returns (GetPostResponse) {}

  // Create a Comment
  rpc CreateComment (CreateCommentRequest) returns (CreateCommentResponse) {}

  // Upvote or downvote a Comment
  rpc VoteComment (VoteCommentRequest) returns (VoteCommentResponse) {}

  // Retrieve a Comment
  rpc GetComment (GetCommentRequest) returns (GetCommentResponse) {}

  // Retrieving a list of N most upvoted comments under a post
  rpc GetTopComments (GetTopCommentsRequest) returns (GetTopCommentsResponse) {}

  // Expand a comment branch
  rpc ExpandCommentBranch (ExpandCommentBranchRequest) returns (ExpandCommentBranchResponse) {}

  // Monitor updates to posts and comments
  rpc MonitorUpdates (stream MonitorUpdatesRequest) returns (stream MonitorUpdatesResponse) {}
}


/* 
 * Enumerations
 */


enum SubRedditState {
  SUBREDDITSTATE_UNSPECIFIED = 0;
  PUBLIC = 1;
  PRIVATE = 2;
  HIDDEN = 3;
}

enum PostState {
  POSTSTATE_UNSPECIFIED = 0;
  NORMAL_POST = 1;
  LOCKED_POST = 2;
  HIDDEN_POST = 3;
}

enum CommentState {
  COMMENTSTATE_UNSPECIFIED = 0;
  NORMAL_COMMENT = 1;
  LOCKED_COMMENT = 2;
}

enum ContentType {
  CONTENTTYPE_UNSPECIFIED = 0;
  POST = 1;
  COMMENT = 2;
}


/* 
 * Data Models
 */


message User {
  int32 id = 1;
}

message SubReddit {
  int32 id = 1;
  string name = 2;
  SubRedditState state = 3; // State should never be unspecified
  repeated string tags = 4;
}

message Post {
  int32 id = 1;
  string title = 2;
  string content = 3;
  SubReddit subReddit = 4;
  optional string videoURL = 5;
  optional string imageURL = 6;
  optional User author = 7;
  int32 score = 8;
  PostState state = 9; // State should never be unspecified
  google.type.Date publicationDate = 10;
}

message Comment {
  int32 id = 1;
  string content = 2;
  User author = 3;
  int32 score = 4;
  CommentState state = 5; // State should never be unspecified
  google.type.Date publicationDate = 6;
  ContentType parent = 7; // Parent should never be unspecified
  int32 parentID = 8;
  repeated Comment children = 9;
}


/* 
 * RPC Messages
 */


// The request message for creating a post
message CreatePostRequest {
  Post post = 1;
}

// The response message for creating a post
message CreatePostResponse {
  Post post = 1;
}

// The request message for upvoting or downvoting a post
message VotePostRequest {
  int32 postID = 1;
  int32 voterID = 2;
  bool upvote = 3;
}

// The response message for upvoting or downvoting a post
message VotePostResponse {
  int32 score = 1;
}

// The request message for retrieving a post
message GetPostRequest {
  int32 postID = 1;
}

// The response message for retrieving a post
message GetPostResponse {
  Post post = 1;
}

// The request message for creating a comment
message CreateCommentRequest {
  Comment comment = 1;
}

// The response message for creating a comment
message CreateCommentResponse {
  Comment comment = 1;
}

// The request message for upvoting or downvoting a comment
message VoteCommentRequest {
  int32 commentID = 1;
  int32 voterID = 2;
  bool upvote = 3;
}

// The response message for upvoting or downvoting a comment
message VoteCommentResponse {
  int32 score = 1;
}

// The request message for retrieving a comment
message GetCommentRequest {
  int32 commentID = 1;
}

// The response message for retrieving a comment
message GetCommentResponse {
  Comment comment = 1;
}

// The request message for retrieving a list of N most upvoted comments under a post
message GetTopCommentsRequest {
  int32 postID = 1;
  int32 quantity = 2;
}

// The response message for retrieving a list of N most upvoted comments under a post
message GetTopCommentsResponse {
  repeated Comment comments = 1;
}

// The request message for expanding a comment branch
message ExpandCommentBranchRequest {
  int32 commentID = 1;
  int32 quantity = 2;
}

// The response message for expanding a comment branch
message ExpandCommentBranchResponse {
  repeated Comment comments = 1;
}

// The request message for monitoring updates
message MonitorUpdatesRequest {
  ContentType contentType = 1;
  int32 contentID = 2;
}

// The response message for monitoring updates
message MonitorUpdatesResponse {
  ContentType contentType = 1;
  int32 contentID = 2;
  int32 score = 3;
}
